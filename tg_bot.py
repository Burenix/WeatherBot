import requests
import datetime
from config import  tg_bot_token, open_weather_token
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types.reply_keyboard import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor

bot = Bot(token=tg_bot_token)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    user = message.from_user
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    btn_start = KeyboardButton('/start')
    markup.add(btn_start)
    await message.reply("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ WeatherBot! üå¶Ô∏è\n–ü—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥, –∏ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—é –≤–∞–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã!",
                        reply_markup=markup)

@dp.message_handler()
async def get_weather(message: types.Message):
    code_to_smile = {
        "Clear": "–Ø—Å–Ω–æ \U00002600",
        "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
        "Rain": "–î–æ–∂–¥—å \U00002614",
        "Drizzle": "–î–æ–∂–¥—å \U00002614",
        "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
        "Snow": "–°–Ω–µ–≥ \U0001F328",
        "Mist": "–¢—É–º–∞–Ω \U0001F32B"
    }

    code_temperature = "\U00002103"
    code_wind = "\U0001F32C"
    code_sunrise = "\U0001F305"
    code_sunset = "\U0001F304"

    try:
        r = requests.get(
            f"https://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
        )
        data = r.json()

        city = data['name']

        weather_main = data['weather'][0]['main']

        if weather_main in code_to_smile:
            wd = code_to_smile[weather_main]
        else:
            wd = '–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –æ–∫–Ω–æ, –Ω–µ –ø–æ–π–º—É –∫–∞–∫–∞—è —Å–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞!'

        cur_weather = data['main']['temp']
        feels_like_temp = data['main']['feels_like']
        humidity = data['main']['humidity']
        wind_speed = data['wind']['speed']
        sunrise_timestamp = datetime.datetime.fromtimestamp(data['sys']['sunrise'])
        sunset_timestamp = datetime.datetime.fromtimestamp(data['sys']['sunset'])
        length_of_the_day = datetime.datetime.fromtimestamp(data['sys']['sunset']) - datetime.datetime.fromtimestamp(data['sys']['sunrise'])

        await message.reply(
            f'‚ñ∂{datetime.datetime.now().strftime("%Y-%m-%d, %H:%M")}‚óÄ\n'
            f'–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {wd}\n‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {round(cur_weather)} {code_temperature}\n‚Ä¢ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {round(feels_like_temp)} {code_temperature}\n'
            f'‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}% \U0001F4A7\n‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {round(wind_speed)} –º/c {code_wind}\n'
            f'‚Ä¢ –í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp.strftime("%H:%M:%S")} {code_sunrise}\n‚Ä¢ –ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp.strftime("%H:%M:%S")} {code_sunset}\n'
            f'‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n'
            f'‚òÄÔ∏è –í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ! ‚òÄÔ∏è'
        )

    except:
        await message.reply('\U00002716 –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ \U00002716')

if __name__ == '__main__':
    executor.start_polling(dp)